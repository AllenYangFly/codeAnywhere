'use strict';

// ES6诞生以前，异步编程的方法，大概有下面四种。

// 回调函数
// 事件监听
// 发布/订阅
// Promise 对象

// 1.callback
{
    fs.readFile('path', function () {});
}

// 不难想象，如果依次读取多个文件，就会出现多重嵌套。代码不是纵向发展，
// 而是横向发展，很快就会乱成一团，无法管理。这种情况就称为"回调函数噩梦"

// 2.Promise就是为了解决这个问题的，将嵌套转换为链式操作

// 第一步，协程A开始执行。
// 第二步，协程A执行到一半，利用yield进入暂停，执行权转移到协程B。
// 第三步，（一段时间后）协程B交还执行权。
// 第四步，协程A恢复执行。
{}

// 3.Thunk函数
// 编译器的"传名调用"实现，往往是将参数放到一个临时函数之中
{}